# .github/workflows/deploy.yml
name: Deploy Multi-Cloud AI Infrastructure

on:
  workflow_dispatch:  # Manual trigger button
  push:
    branches: [main]
    paths:
      - 'terraform/**'
      - 'ansible/**'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    name: Deploy AI Endpoints to AWS, Azure & GCP
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2
    
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Setup GCP credentials
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false
    
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
    
    - name: Terraform Plan
      working-directory: ./terraform
      env:
        TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
      run: terraform plan -out=tfplan
    
    - name: Terraform Apply
      working-directory: ./terraform
      env:
        TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
      run: terraform apply tfplan
    
    - name: Get Terraform Outputs
      id: tf_outputs
      working-directory: ./terraform
      run: |
        AWS_IP=$(terraform output -raw aws_public_ip 2>/dev/null)
        AZURE_IP=$(terraform output -raw azure_public_ip 2>/dev/null)
        GCP_IP=$(terraform output -raw gcp_public_ip 2>/dev/null)
        
        echo "aws_ip=$AWS_IP" >> $GITHUB_OUTPUT
        echo "azure_ip=$AZURE_IP" >> $GITHUB_OUTPUT
        echo "gcp_ip=$GCP_IP" >> $GITHUB_OUTPUT
        
        echo "AWS IP: $AWS_IP"
        echo "Azure IP: $AZURE_IP"
        echo "GCP IP: $GCP_IP"
    
    - name: Wait for instances to be ready
      run: sleep 60
    
    - name: Setup Python for Ansible
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible
    
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/cloudguard-demo-key
        chmod 600 ~/.ssh/cloudguard-demo-key
    
    - name: Create Ansible Inventory
      run: |
        mkdir -p ansible/inventory
        cat > ansible/inventory/hosts <<EOF
        [ai_endpoints]
        aws-endpoint ansible_host=${{ steps.tf_outputs.outputs.aws_ip }} cloud_provider=AWS ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/cloudguard-demo-key
        azure-endpoint ansible_host=${{ steps.tf_outputs.outputs.azure_ip }} cloud_provider=Azure ansible_user=azureuser ansible_ssh_private_key_file=~/.ssh/cloudguard-demo-key
        gcp-endpoint ansible_host=${{ steps.tf_outputs.outputs.gcp_ip }} cloud_provider=GCP ansible_user=debian ansible_ssh_private_key_file=~/.ssh/cloudguard-demo-key
        
        [all:vars]
        ansible_ssh_common_args='-o StrictHostKeyChecking=no'
        EOF
    
    - name: Run Ansible Playbook with Datadog Configuration
      working-directory: ./ansible
      env:
        DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
      run: |
        ansible-playbook playbooks/configure-nginx.yml \
          -i inventory/hosts \
          -e datadog_api_key=$DATADOG_API_KEY
    
    - name: Verify Deployments
      run: |
        echo "ðŸš€ AI Model Endpoints Deployed Successfully!"
        echo "================================"
        echo "AWS Endpoint: http://${{ steps.tf_outputs.outputs.aws_ip }}"
        echo "Azure Endpoint: http://${{ steps.tf_outputs.outputs.azure_ip }}"
        echo "GCP Endpoint: http://${{ steps.tf_outputs.outputs.gcp_ip }}"
        echo "================================"
        
        # Test endpoints
        echo "Testing endpoints..."
        for ip in ${{ steps.tf_outputs.outputs.aws_ip }} ${{ steps.tf_outputs.outputs.azure_ip }} ${{ steps.tf_outputs.outputs.gcp_ip }}; do
          echo "Testing http://$ip/health"
          curl -s -o /dev/null -w "%{http_code}" http://$ip/health || true
          echo ""
        done
        
        echo "================================"
        echo "Datadog Agent Status: Installed and collecting metrics"
        echo "Check Datadog dashboard in 2-3 minutes for:"
        echo "  - Custom metrics (cloudguard.ai_model_*)"
        echo "  - System metrics (system.cpu.*, system.mem.*)"
        echo "  - Nginx metrics (nginx.net.*)"
        echo "================================"
    
    - name: Display Datadog Dashboard Info
      if: success()
      run: |
        echo "ðŸ“Š Datadog Monitoring Active!"
        echo ""
        echo "Your metrics should appear in Datadog within 2-3 minutes:"
        echo ""
        echo "Custom AI Metrics:"
        echo "  â€¢ cloudguard.ai_model_requests_total"
        echo "  â€¢ cloudguard.ai_model_latency_seconds"
        echo "  â€¢ cloudguard.ai_model_gpu_utilization"
        echo ""
        echo "These metrics are tagged with:"
        echo "  â€¢ cloud:aws/azure/gcp"
        echo "  â€¢ model:bert-large-uncased/gpt-2-medium/llama-2-7b"
        echo "  â€¢ project:cloudguard-trinity"
        echo ""
        echo "To view: Go to Metrics Explorer and search for 'cloudguard'"